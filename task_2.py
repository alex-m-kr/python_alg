"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def count_even_odd(num):
    global cnt_even  # если счетчики объявлять тут как локальные переменные,
    # то они обнуляются при каждом вызове функции, с этим была проблема,
    # поэтому пришлось попробовать так, не знаю, сколь это правильно
    global cnt_odd

    if num == 0:
        print(f'четных {cnt_even}, нечетных {cnt_odd}')
        return

    last_num = num % 10
    # print(last_num)
    if last_num % 2 == 0:
        cnt_even += 1
    else:
        cnt_odd += 1
    num //= 10

    count_even_odd(num)


cnt_even = 0
cnt_odd = 0

count_even_odd(123)
