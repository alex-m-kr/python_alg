"""
Задание 1.

Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива

Сделайте замеры времени выполнения кода с помощью модуля timeit

Оптимизируйте, чтобы снизить время выполнения
Проведите повторные замеры

Добавьте аналитику: что вы сделали и почему!!!
Без аналитики задание считается не принятым
"""
from timeit import Timer


def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr


def func_2(nums):
    new_arr = [i for i in range(len(nums)) if nums[i] % 2 == 0]
    return new_arr


lst = [1, 2, 3, 4, 5, 6, 8, 10, 12, 10, 10]  # тестовый список
# проверка работы функций
print(func_1(lst))
print('--------------')
print(func_2(lst))
print('--------------')

t1 = Timer('func_1(lst)', globals=globals())
print('замеры первой функции', t1.timeit(number=1000000), 'сек')

t2 = Timer('func_2(lst)', globals=globals())
print('замеры второй функции', t2.timeit(number=1000000), 'сек')

'''
В оптимизированном варианте использовано списковое включение (list comprehensions),
оно должно работать быстрее, 
замеры это подтверждают

замеры первой функции 2.6996904580000773 сек
замеры второй функции 2.550257192000572 сек
'''
